#!/bin/bash

# LWDAQ Launch Program for Unix, Linux, and Darwin.
# Copyright (C) 2004-2009 Kevan Hashemi, Brandeis University
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,
# USA
 
#
# This shell program launches LWDAQ from a terminal on Linux, Unix, or
# MacOS. On Windows, you can run the shell from Cygwin directly. On
# MinGW you can run the shell only after you insert an empty line in
# front of the hash-bang at the top of the script. The shell program
# accepts options --no-gui, --gui, or --no-console, as described in the
# LWDAQ manual. After the option (if any), you can pass a TCL script
# that will be executed by LWDAQ after it starts up and initialized. We
# call this the configuration script. The script can refer to itself by
# name as $LWDAQ_Info(configuration_file) and so determine its own 
# location. If you specify a configuration script you can also pass further 
# parameters that will placed in the $LWDAQ_Info(argv) list. You can refer 
# to these parameters from within your configuration script. Thus the
# following line:
#
# ./lwdaq --no-console config.tcl data.txt 34.56
#
# Will call tclsh in the background and run the tcl script config.tcl. The
# configuration script might open a file called data.txt and look for the 
# line containing the value 34.56.
# 

# Determine the location of the LWDAQ directory. We assume that this
# script is in the LWDAQ directory.
LWDAQ_DIR=`dirname $0`

# Determine the platform.
PLATFORM=UNIX
if [ "`uname | grep Darwin`" != "" ]
then 
	PLATFORM=MacOS
fi
if [ "`uname | grep CYGWIN`" != "" ]
then 
	PLATFORM=Windows
fi
if [ "`uname | grep MINGW`" != "" ]
then 
	PLATFORM=Windows
fi
if [ "`uname | grep Linux`" != "" ]
then 
	PLATFORM=Linux
fi
echo "PLATFORM: $PLATFORM"

# Determine the option and configuration script name. We look
# for the "--" string at the start of the first parameter, and
# if we find it, we use this as our option. Otherwise we create
# the option "--gui". We shift the positional parameters to the
# left so as to remove the option and configuration file, leaving
# only additional positional parameters, should they exist. We
# will pass these additional parameters to tclsh or wish later.
if [ `expr "$1" : "--"` -eq 2 ] 
then
	OPTION=$1
	CONFIG_FILE=$2
	shift 2
else
	OPTION="--gui"
	CONFIG_FILE=$1
	shift 1
fi
echo "OPTION: $OPTION"

# Check the configuration file.
if [ "$CONFIG_FILE" != "" ]
then 
	if [ -f $CONFIG_FILE ]
	then
		echo "CONFIG_FILE: $CONFIG_FILE"
	else
		echo "ERROR: Configuration file does not exist."
		exit
	fi
else
	echo "CONFIG_FILE: none specified"
fi

# Check to see if we should run in no-gui mode with
# tclsh or with gui in wish.
if [ "$OPTION" == "--no-console" ] 
then 
	GUI_ENABLED=0
	CONSOLE_ENABLED=0
fi
if [ "$OPTION" == "--no-gui" ] 
then 
	GUI_ENABLED=0
	CONSOLE_ENABLED=1
fi
if [ "$OPTION" == "--gui" ] 
then 
	GUI_ENABLED=1
	CONSOLE_ENABLED=1
fi
echo "GUI_ENABLED: $GUI_ENABLED"
echo "CONSOLE_ENABLED: $CONSOLE_ENABLED"

# If we're in UNIX, we assume wish and tclsh are available at
# the command prompt.
if [ $PLATFORM == UNIX ]
then
	if [ $GUI_ENABLED == 1 ]
	then
		SHELL=wish
	else
		SHELL=tclsh
	fi
fi

# On Linux, we use the wish and tclsh bundled with LWDAQ.app.
if [ $PLATFORM == Linux ]
then
	LD_LIBRARY_PATH="$LWDAQ_DIR/LWDAQ.app/Contents/Linux/lib"
	export LD_LIBRARY_PATH
	if [ $GUI_ENABLED == 1 ] 
	then
		SHELL="$LWDAQ_DIR/LWDAQ.app/Contents/Linux/bin/wish8.5"
	else
		SHELL="$LWDAQ_DIR/LWDAQ.app/Contents/Linux/bin/tclsh8.5"
	fi
fi

# On Macos, we use the wish and tclsh bundled with LWDAQ.app.
if [ $PLATFORM == MacOS ]
then
	if [ $GUI_ENABLED == 1 ]
	then
		SHELL="$LWDAQ_DIR/LWDAQ.app/Contents/MacOS/Wish"
	else
		SHELL="$LWDAQ_DIR/LWDAQ.app/Contents/MacOS/tclsh"
	fi
fi

# On Windows, we use the wish and tclsh bundled with LWDAQ.app
# so that you can call them from the MinGW command line or the
# Cigwin command line.
if [ $PLATFORM == Windows ]
then
	if [ $GUI_ENABLED == 1 ]
	then
		SHELL="$LWDAQ_DIR/LWDAQ.app/Contents/Windows/bin/wish85.exe"
	else
		SHELL="$LWDAQ_DIR/LWDAQ.app/Contents/Windows/bin/tclsh85.exe"
	fi
fi

# Let the user know which shell we selected.
echo "SHELL: $SHELL"

# Set the initialization script name.
INIT_FILE="$LWDAQ_DIR/LWDAQ.app/Contents/LWDAQ/Init.tcl"

# Launch the shell and pass to it the start-up script and any additional
# parameters we may have passed to this bash script. If we have 
# disabled the console, then we launch the application in the
# background and re-direct its output to the null device. All output
# will be lost, and the process will run in the background until
# you kill it from a terminal, or through some means of coummunication
# with the process established by the start-up script. For example,
# the start-up script could start the LWDAQ System Server, which
# allow you to quit the LWDAQ process with an "exit" command.
if [ $CONSOLE_ENABLED = 1 ]
then
	$SHELL $INIT_FILE --console $CONFIG_FILE $@
else
	$SHELL $INIT_FILE --no-console $CONFIG_FILE $@ &
fi

# We're done.
exit
