# (C) 2009, Kevan Hashemi, Brandeis University

# We start with an acquisifier step that clears the run_result string
# and notifies the user where the result string will be stored.
acquisifier:
name: Initialize
post_processing: {
	set config(run_result) ""
	LWDAQ_print $info(text) "Results will be stored in \"$config(run_results)\"."
}
config:
end.

# We test the error-handling the Acquisifier applies to post-processing
# scripts.
acquisifier:
name: Error_Test
post_processing: {
	error "Testing error-handling."
}
config:
end.

# Here we demonstrate how to use low-level LWDAQ message commands
# to wake up a device. Some faulty devices won't work when they are
# cold, so we wake them up with steps like this, a minute or so before
# we acquire from them.
acquisifier:
name: Wake_BCAM_1_2
post_processing: {
  set sock [LWDAQ_socket_open 129.64.37.79:90]
  LWDAQ_set_base_addr_hex $sock 00E00000
  LWDAQ_set_driver_mux $sock 5 1
  LWDAQ_wake $sock
  LWDAQ_socket_close $sock
}
config:
end.

# We set up the default behavior of the BCAM instrument when
# called by this Acquisifier script. The Default behavior even
# includes some post-processing, which is executed every time
# an acquire step uses the BCAM instrument. The default post-
# processing takes place after any post-processing the script
# might define for a particular acquire step. The post-processing
# checks the result string for errors, and marks them in the
# run result string with -1 values.
default:
name: BCAM_Defaults
instrument: BCAM
default_post_processing: {
	if {![LWDAQ_is_error_result $result]} {
		append config(run_result) " [lrange $result 1 2]"
	} {
		append config(run_result) " -1 -1"
	}
}
post_processing: {
	upvar #0 The_Global_Var var
	set var(message) "Defined and set global variable The_Global_Array."
	set var(time) [clock seconds]
	LWDAQ_print $info(text) $var(message)
}
config:
	image_source daq
	analysis_num_spots 2
	daq_adjust_flash 1
	daq_ip_addr 129.64.37.79
	daq_source_ip_addr *
	ambient_exposure_seconds 0
end.

# Here we define default behavior for the Rasnik instrument. The post
# processing checks for erros in the result string, and adds -1 values
# to the run result string if there are errors. 
default:
name: Rasnik_Defaults
instrument: Rasnik
default_post_processing: {
	if {![LWDAQ_is_error_result $result]} {
		append config(run_result) " [lrange $result 1 2]"
	} {
		append config(run_result) " -1 -1"
	}
}
config:
	daq_ip_addr 129.64.37.79
	daq_source_ip_addr *
	intensify exact
	analysis_square_size_um 120
	daq_mux_socket 1
	daq_device_type 2
	daq_source_device_type 1
end.

# Here we have default behavior for the Thermometer. Here we use
# values -100 to indicate errors.
default:
instrument: Thermometer
default_post_processing: {
	if {![LWDAQ_is_error_result $result]} {
		append config(run_result) " [lrange $result 1 2]"
	} {
		append config(run_result) " -100 -100"
	}
}
config:
	image_source daq
	analysis_enable 1
	daq_ip_addr 129.64.37.79
	daq_mux_socket 1
end.

acquire:
name: Thermometer_1
instrument: Thermometer
result: None
time: 0
disable: 0
config:
	daq_driver_socket 4
	daq_device_element "1 2 3 4 6 8"
	daq_device_name A2053
end.

acquire:
name: Thermometer_2
instrument: Thermometer
result: None
time: 0
disable: 1
config:
	daq_driver_socket 4
	daq_device_element "3 4"
	daq_device_name A2053
end.

# Here we define a base address for the driver socket, so that
# we can select one of the drivers in a VME crate, or other such
# multiple-driver collection that is accessible through a single
# TCPIP connection. The base address is "00E00000", and we specify
# socket 5 on the driver with this base address.
acquire:
name: BCAM_1_2
instrument: BCAM
result: None
time: 0
config:
	daq_flash_seconds 0.001
	daq_driver_socket 00E000000:5
	daq_device_element 2
	daq_source_device_element "3 4"
	daq_source_driver_socket 8
end.

acquire:
name: Rasnik_1
instrument: Rasnik
result: None
time: 0
post_processing: {
	upvar #0 The_Global_Var var
	LWDAQ_print $info(text) "The_Global_Array(time) = $var(time)"
}
config:
	daq_flash_seconds 0.01
	daq_driver_socket 6
	daq_device_element 2
	daq_source_device_element 1
	daq_source_driver_socket 7
end.

acquire:
name: BCAM_2_1
instrument: BCAM
result: None
time: 0
config:
	daq_flash_seconds 0
	daq_driver_socket 8
	daq_device_element 2
	daq_source_device_element "3 4"
	daq_source_driver_socket 5
end.

# The post-processing in this step demonstrates the metadata variable. Any 
# step can define its metadata field, and this field may be manipulated 
# in post-processing or default post-processing. Here we increment the 
# metadata in post-processing. The Acquisifier records the new value of the
# metadata in its active script.
acquire:
name: Rasnik_2
instrument: Rasnik
result: None
time: 0
metadata: 0
post_processing: {
	incr metadata
	LWDAQ_print $info(text) "metadata = $metadata"
}
config:
	daq_flash_seconds 0.001
	daq_driver_socket 6
	daq_device_element 2
	daq_source_device_element 1
	daq_source_driver_socket 7
end.

# The power cycle demonstrates the use of the daq_actions field in 
# the Diagnostic instrument, so turn on and off the power supplies to
# devices, with delays. Such cycles are useful in large systems for
# ensuring proper power-up state.
acquire:
name: Power_Cycle
instrument: Diagnostic
result: None
time: 0
config:
	daq_actions "on off 500 on 200"
	daq_psc 1
end.

# This acquisifier step demonstrates the definition of a cumstom field
# in a step, which can be obtained by the get-field command and changed
# by the put-field command.
acquisifier:
screen_text: "Custom Field, Counter = 0"
post_processing: {
  set s [Acquisifier_get_field $info(step) screen_text]
  lset s end [expr [lindex $s end] + 1]
  LWDAQ_print $info(text) $s
  Acquisifier_put_field $info(step) screen_text $s
}
config:
end.

# At the end of the script, we print the run result string to the run
# results file and to the Acquisifier panel.
acquisifier:
name: Finalize
post_processing: {
	LWDAQ_print $config(run_results) $config(run_result)
	LWDAQ_print $info(text) "$config(run_result)" blue
}
config:
end.


